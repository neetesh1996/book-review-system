type Query {
  users: [User!]!
  books: [Book!]!
  reviews: [Review!]!
  user(id: Int!): User
  book(id: Int!): Book
  review(id: Int!): Review
  getBooks(page: Int, limit: Int, search: String):BookConnection!
  getBook(id: Int!): Book
  getReviews(bookId: Int!, page: Int!, limit: Int!): ReviewConnection!
  getMyReviews: [Review!]!
}

type BookConnection {
  books: [Book!]!
  count: Int!
}

type ReviewConnection {
  reviews: [Review!]!
  count: Int!
}

type Mutation {
  register(username: String!, email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  addBook(title: String!, author: String!, publishedYear: Int!): Book!
  addReview(bookId: Int!, rating: Int!, comment: String!): Review!
  updateReview(id: Int!, rating: Int, comment: String): Review!
  deleteReview(id: Int!): Review!
}

type User {
  id: Int!
  username: String!
  email: String!
  reviews: [Review!]!
}

type Book {
  id: Int!
  title: String!
  author: String!
  publishedYear: Int!
  reviews: [Review!]!
}

type Review {
  id: Int!
  rating: Int!
  comment: String!
  user: User!
  book: Book!
  userId: Int!
  bookId: Int!
  createdAt: String!
}

type AuthPayload {
  token: String!
  user: User!
}
